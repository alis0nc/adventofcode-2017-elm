module Day1 exposing (..)

import Char exposing (toCode)
import List exposing (..)
import Html exposing (Html, div, header, img, text)
import Html.Attributes exposing (class, src, width)

initialModel : Model
initialModel = {}
type alias Model = {}
view : Model -> Html Msg
view model = text (toString (day

type Msg
    = None

update : Msg -> Model -> (Model, Cmd Msg)
update msg model = (model, Cmd.none)

subscriptions =
    \_ -> Sub.none

{- 
The captcha requires you to review a sequence of digits (your puzzle input) 
and find the sum of all digits that match the next digit in the list. 
The list is circular, so the digit after the last digit is the first digit 
in the list. 
-}
day1 : String -> Int
day1 x =
    recurse 
        ( x
            |> String.toList 
            |> listDigitsToListNumbers
            |> (\a -> append a (take 1 a)) -- circularity
        )
        0
        
recurse : List Int -> Int -> Int
recurse x summa =
    if head x == Nothing then -- termination case, we've run out of the list
        summa
    else if head x == head (tail x |> Maybe.withDefault []) then -- the current digit matches the next digit
        recurse (tail x |> Maybe.withDefault []) (summa + (head x |> Maybe.withDefault 0))
    else
        recurse (tail x |> Maybe.withDefault []) summa

{-
Now, instead of considering the next digit, it wants you to consider the digit 
halfway around the circular list. That is, if your list contains 10 items, only 
include a digit in your sum if the digit 10/2 = 5 steps forward matches it. 
Fortunately, your list has an even number of elements. 
-}
day1part2 : String -> Int
day1part2 x = -1 -- Not implemented yet

{- Helper function that gives a list of Int from a list of Char [digits]. -}
asciiOffset : Int
asciiOffset = toCode '0'
listDigitsToListNumbers : List Char -> List Int
listDigitsToListNumbers listOfDigits =
    listOfDigits
        |> List.map toCode 
        |> List.map (\x -> x - asciiOffset)
        |> List.filter (\x -> 0 <= x && x <= 9) -- Silently dump invalid values. Whatever. This is an academic exercise.

main : Program Never Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
    }

init =  (initialModel, Cmd.none)